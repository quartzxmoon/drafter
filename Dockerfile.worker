# PA eDocket Desktop Worker Dockerfile
# Optimized for background processing and document ingestion

# Build stage
FROM node:18-alpine AS builder

# Install system dependencies for PDF processing and OCR
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-data-eng \
    imagemagick \
    ghostscript \
    ffmpeg

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY scripts/ ./scripts/
COPY migrations/ ./migrations/
COPY config/ ./config/
COPY templates/ ./templates/

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-data-eng \
    imagemagick \
    ghostscript \
    ffmpeg \
    curl \
    dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/scripts ./scripts
COPY --from=builder --chown=nodejs:nodejs /app/migrations ./migrations
COPY --from=builder --chown=nodejs:nodejs /app/config ./config
COPY --from=builder --chown=nodejs:nodejs /app/templates ./templates
COPY --chown=nodejs:nodejs package*.json ./

# Create required directories with proper permissions
RUN mkdir -p data logs temp && \
    chown -R nodejs:nodejs data logs temp

# Switch to non-root user
USER nodejs

# Health check for worker process
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
    CMD pgrep -f "worker.js" || exit 1

# Start the worker
CMD ["dumb-init", "node", "scripts/worker.js"]
