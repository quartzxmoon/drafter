# PA eDocket Desktop - Production Docker Compose
# Complete production stack with all required services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pa-edocket-postgres
    environment:
      POSTGRES_DB: pa_edocket_production
      POSTGRES_USER: pa_edocket
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pa_edocket -d pa_edocket_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # OpenSearch for full-text search
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: pa-edocket-opensearch
    environment:
      - cluster.name=pa-edocket-cluster
      - node.name=pa-edocket-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Qdrant for vector search
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: pa-edocket-qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    container_name: pa-edocket-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: pa-edocket-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pa_edocket:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/pa_edocket_production
      OPENSEARCH_URL: http://opensearch:9200
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379
      COURTLISTENER_API_TOKEN: ${COURTLISTENER_API_TOKEN}
      GOVINFO_API_KEY: ${GOVINFO_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-change_me_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-change_me_32_character_key_here}
      LOG_LEVEL: info
      PORT: 3000
      METRICS_PORT: 9090
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Worker for background processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: pa-edocket-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pa_edocket:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/pa_edocket_production
      OPENSEARCH_URL: http://opensearch:9200
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379
      COURTLISTENER_API_TOKEN: ${COURTLISTENER_API_TOKEN}
      GOVINFO_API_KEY: ${GOVINFO_API_KEY}
      LOG_LEVEL: info
      WORKER_CONCURRENCY: 4
      BATCH_SIZE: 100
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pa-edocket-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pa-edocket-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - pa-edocket-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pa-edocket-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - pa-edocket-network

volumes:
  postgres_data:
    driver: local
  opensearch_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pa-edocket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
