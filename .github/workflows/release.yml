# Release workflow for PA eDocket Desktop
# Builds and publishes signed releases with auto-updates

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          awk '/^## \['"${{ steps.extract_version.outputs.VERSION }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.extract_version.outputs.VERSION }}" > release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PA eDocket Desktop v${{ steps.extract_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundle_path: 'src-tauri/target/release/bundle/deb/*.deb'
            asset_name_pattern: 'pa-edocket-desktop_*_amd64.deb'
            asset_name: 'pa-edocket-desktop-linux-amd64.deb'
            content_type: 'application/vnd.debian.binary-package'

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundle_path: 'src-tauri/target/release/bundle/appimage/*.AppImage'
            asset_name_pattern: 'pa-edocket-desktop_*_amd64.AppImage'
            asset_name: 'pa-edocket-desktop-linux-amd64.AppImage'
            content_type: 'application/octet-stream'

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle_path: 'src-tauri/target/release/bundle/msi/*.msi'
            asset_name_pattern: 'PA eDocket Desktop_*_x64_en-US.msi'
            asset_name: 'pa-edocket-desktop-windows-x64.msi'
            content_type: 'application/x-msi'

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle_path: 'src-tauri/target/release/bundle/nsis/*.exe'
            asset_name_pattern: 'PA eDocket Desktop_*_x64-setup.exe'
            asset_name: 'pa-edocket-desktop-windows-x64-setup.exe'
            content_type: 'application/octet-stream'

          - os: macos-latest
            target: x86_64-apple-darwin
            bundle_path: 'src-tauri/target/release/bundle/dmg/*.dmg'
            asset_name_pattern: 'PA eDocket Desktop_*_x64.dmg'
            asset_name: 'pa-edocket-desktop-macos-x64.dmg'
            content_type: 'application/x-apple-diskimage'

          - os: macos-latest
            target: aarch64-apple-darwin
            bundle_path: 'src-tauri/target/release/bundle/dmg/*.dmg'
            asset_name_pattern: 'PA eDocket Desktop_*_aarch64.dmg'
            asset_name: 'pa-edocket-desktop-macos-aarch64.dmg'
            content_type: 'application/x-apple-diskimage'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install frontend dependencies
      run: npm install

    - name: Build frontend
      run: npm run build

    - name: Import signing certificate (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    - name: Build Tauri app
      run: npm run tauri build -- --target ${{ matrix.target }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: Find and upload release asset
      shell: bash
      run: |
        # Find the built asset
        asset_path=$(find ${{ matrix.bundle_path }} -name "${{ matrix.asset_name_pattern }}" | head -1)
        
        if [ -z "$asset_path" ]; then
          echo "Asset not found matching pattern: ${{ matrix.asset_name_pattern }}"
          echo "Available files:"
          find src-tauri/target/release/bundle/ -type f
          exit 1
        fi
        
        echo "Found asset: $asset_path"
        
        # Upload to release
        curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: ${{ matrix.content_type }}" \
          --data-binary @"$asset_path" \
          "${{ needs.create-release.outputs.upload_url }}?name=${{ matrix.asset_name }}"

  update-release-json:
    name: Update Release JSON
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate release JSON for auto-updater
      run: |
        cat > release.json << EOF
        {
          "version": "${{ steps.extract_version.outputs.VERSION }}",
          "notes": "Release ${{ steps.extract_version.outputs.VERSION }}",
          "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "platforms": {
            "linux-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.VERSION }}/pa-edocket-desktop-linux-amd64.AppImage"
            },
            "windows-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.VERSION }}/pa-edocket-desktop-windows-x64-setup.exe"
            },
            "darwin-x86_64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.VERSION }}/pa-edocket-desktop-macos-x64.dmg"
            },
            "darwin-aarch64": {
              "signature": "",
              "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.VERSION }}/pa-edocket-desktop-macos-aarch64.dmg"
            }
          }
        }
        EOF

    - name: Upload release JSON
      run: |
        curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data-binary @release.json \
          "${{ needs.create-release.outputs.upload_url }}?name=release.json"

  notify:
    name: Notify Release
    needs: [create-release, build-and-upload, update-release-json]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.build-and-upload.result == 'success'
      run: |
        echo "✅ Release v${{ steps.extract_version.outputs.VERSION }} published successfully!"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.extract_version.outputs.VERSION }}"

    - name: Notify failure
      if: needs.build-and-upload.result == 'failure'
      run: |
        echo "❌ Release v${{ steps.extract_version.outputs.VERSION }} failed!"
        exit 1
