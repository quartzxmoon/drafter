# Release workflow for PA eDocket Desktop
# Builds and publishes signed releases with auto-updates

name: Release Build

on:
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build signed installers
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_glob: src-tauri/target/release/*
            asset_name: drafter-linux-artifacts
          - os: windows-latest
            artifact_glob: src-tauri/target/release/*.exe
            asset_name: drafter-windows-x86_64.exe
          - os: macos-latest
            artifact_glob: src-tauri/target/release/bundle/dmg/*.dmg
            asset_name: drafter-macos.dmg

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Ubuntu deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend deps
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Import Apple certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain-db
          security create-keychain -p "" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "" $KEYCHAIN_PATH
          echo "$APPLE_CERTIFICATE" | base64 --decode > $RUNNER_TEMP/cert.p12
          security import $RUNNER_TEMP/cert.p12 -k $KEYCHAIN_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH $(security list-keychains | tr -d '"')

      - name: Configure notarytool (macOS)
        if: matrix.os == 'macos-latest'
        env:
          NOTARY_API_KEY_ID: ${{ secrets.NOTARY_API_KEY_ID }}
          NOTARY_API_ISSUER_ID: ${{ secrets.NOTARY_API_ISSUER_ID }}
          NOTARY_API_KEY: ${{ secrets.NOTARY_API_KEY }}
        run: |
          mkdir -p ~/.notarytool
          cat > ~/.notarytool/config.json <<EOF
          { "key_id": "${NOTARY_API_KEY_ID}",
            "issuer_id": "${NOTARY_API_ISSUER_ID}",
            "private_key": "${NOTARY_API_KEY}",
            "keychain": false }
          EOF

      - name: Build Tauri app
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Find artifact(s)
        id: find
        shell: bash
        run: |
          echo "glob=${{ matrix.artifact_glob }}" >> $GITHUB_OUTPUT

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find.outputs.glob }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
